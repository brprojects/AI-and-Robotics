import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import numpy as np

optimal_strategy = [0.46924829157175396, 0.496551724137931, 0.4391891891891892, 0.46651785714285715, 0.48873873873873874, 0.4956896551724138, 0.453125, 0.4638949671772429, 0.4911894273127753, 0.4878048780487805, 0.4977973568281938, 0.4608501118568233, 0.4955555555555556, 0.49563318777292575, 0.48089887640449436, 0.432967032967033, 0.4321266968325792, 0.46551724137931033, 0.4675324675324675, 0.49889135254988914, 0.47692307692307695, 0.49891540130151846, 0.47333333333333333, 0.4419642857142857, 0.48444444444444446, 0.4717391304347826, 0.474025974025974, 0.458980044345898, 0.48660714285714285, 0.4923747276688453, 0.4912663755458515, 0.45474613686534215, 0.4634146341463415, 0.5054466230936819, 0.4786516853932584, 0.4572072072072072, 0.46205357142857145, 0.46304347826086956, 0.4689507494646681, 0.45454545454545453, 0.4666666666666667, 0.4543478260869565, 0.43946188340807174, 0.5177777777777778, 0.4868421052631579, 0.4749455337690632, 0.512087912087912, 0.4485776805251641, 0.4668094218415418, 0.4608501118568233]

learned_strategy = [0.2851153039832285, 0.30736842105263157, 0.3609341825902335, 0.40425531914893614, 0.3879310344827586, 0.3870967741935484, 0.4518201284796574, 0.3869565217391304, 0.4068522483940043, 0.3925438596491228, 0.39655172413793105, 0.4107142857142857, 0.43201754385964913, 0.4316702819956616, 0.43820224719101125, 0.4458874458874459, 0.42857142857142855, 0.4388646288209607, 0.4780701754385965, 0.4682713347921225, 0.44541484716157204, 0.44468546637744033, 0.4326086956521739, 0.4725274725274725, 0.4342105263157895, 0.46187363834422657, 0.4604966139954853, 0.4822222222222222, 0.44880174291938996, 0.4419642857142857, 0.48253275109170307, 0.424507658643326, 0.44789356984478934, 0.42954545454545456, 0.4358407079646018, 0.46651785714285715, 0.4911111111111111, 0.4814004376367615, 0.4613686534216336, 0.4780701754385965, 0.47692307692307695, 0.458980044345898, 0.49887133182844245, 0.44124168514412415, 0.4651685393258427, 0.44966442953020136, 0.4910313901345291, 0.47651006711409394, 0.4696629213483146, 0.4650655021834061]





episode = [500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000, 14500, 15000, 15500, 16000, 16500, 17000, 17500, 18000, 18500, 19000, 19500, 20000, 20500, 21000, 21500, 22000, 22500, 23000, 23500, 24000, 24500, 25000]

# Define the function to fit
def func(x, a, b):
    return a * np.log(x) + b

# Perform the curve fit
popt, pcov = curve_fit(func, episode, learned_strategy)

# Create the trend line
trendline = popt[0] * np.log(episode) + popt[1]
plt.plot(episode, trendline, 'b--')

# Calculate the polynomial fit
z = np.polyfit(episode, optimal_strategy, 0)
p = np.poly1d(z)
plt.plot(episode, p(episode), 'r--')

plt.plot(episode, learned_strategy, color='b', label = "RL Policy")
plt.plot(episode, optimal_strategy, color='r', label = "Optimal Strategy")
plt.legend(loc=4)
plt.xlabel('Episodes')
plt.ylabel('Win Percentage')
plt.show()
# plt.savefig('../images/blackjack_model_improvement.png')
